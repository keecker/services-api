buildscript {
  repositories {
    google()
    jcenter()
  }

  ext.kotlin_version = '1.2.71'
  ext.dokka_version = '0.9.17'

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.4'
    classpath 'digital.wup:android-maven-publish:3.6.2'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokka_version"
  }
}

allprojects {
  repositories {
    google()
    jcenter()
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << '-Xlint:deprecation'
      options.compilerArgs << '-Xlint:unchecked'
    }
  }
}

// Help functions

def gitTag() {
  def tag = ''
  def proc = 'git describe --abbrev=0 --tags'.execute([], projectDir)
  proc.in.eachLine { line -> tag = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  tag
}

// Use git tag as version name / code

def tagVersionName = gitTag()
logger.info("Version name: $tagVersionName")
def verVals = tagVersionName.split('-')[0].split('\\.')
int tagVersionCode = (
  verVals[0].toInteger()*10000 +
  verVals[1].toInteger()*100 +
  verVals[2].toInteger())
logger.info("Version code: $tagVersionCode")

// Library definition

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

android {
  compileSdkVersion 27

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 27
    versionCode tagVersionCode
    versionName tagVersionName
    //multiDexEnabled true
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    ndk { abiFilters 'arm64-v8a' }
  }

  externalNativeBuild { cmake { path "CMakeLists.txt" } }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  aidlPackageWhiteList "com/keecker/services/utils/IIpcSubscriber.aidl"
  aidlPackageWhiteList "com/keecker/services/utils/sharedmemory/ISharedMemorySubscriber.aidl"
  aidlPackageWhiteList "com/keecker/hardware/robot/interfaces/MovementSafetiesStatus.aidl"
  aidlPackageWhiteList "com/keecker/services/utils/ILowBatteryNotificationListener.aidl"
  aidlPackageWhiteList "com/keecker/services/navigation/interfaces/ITrackedPoseListener.aidl"
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.30.2"

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.23.0'
  testImplementation 'javax.inject:javax.inject:1'
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  androidTestImplementation 'org.mockito:mockito-android:2.22.0'
  androidTestImplementation 'javax.inject:javax.inject:1'
}

// Uses fully qualified archives base name to prevent duplicates
// files generated by kotlin in META-INF.
archivesBaseName = "com.keecker.services.interfaces"

apply plugin: 'digital.wup.android-maven-publish'

publishing {
  if (System.env['JITPACK'] == "true") {
    publications {
      mavenAar(MavenPublication) {
        from components.android
        groupId "com.github.keecker"
      }
    }
  } else {
    publications {
      android.libraryVariants.all { variant ->
        "maven${variant.name.capitalize()}Aar"(MavenPublication) {
            from components.findByName("android${variant.name.capitalize()}")
            groupId "com.keecker.services"
            artifactId "interfaces"
            version "${tagVersionName}-${variant.name}"
        }
      }
    }
    repositories {
      maven {
        url 'http://maven.keecker.com/artifactory/internal-snapshot-local'
        name 'keecker'
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
      }
    }
  }
}

dokka {
  outputFormat = 'jekyll'
  outputDirectory = "$buildDir/javadoc"
}
