buildscript {
  repositories {
    google()
    jcenter()
  }

  ext.kotlin_version = '1.3.0'
  ext.dokka_version = '0.9.17'

  dependencies {
    classpath 'com.android.tools.build:gradle:3.2.1'
    classpath 'digital.wup:android-maven-publish:3.6.2'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokka_version"
  }
}

allprojects {
  repositories {
    google()
    jcenter()
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << '-Xlint:deprecation'
      options.compilerArgs << '-Xlint:unchecked'
    }
  }
}

// Help functions

def gitTag() {
  def tag = ''
  def proc = 'git describe --abbrev=0 --tags'.execute([], projectDir)
  proc.in.eachLine { line -> tag = line }
  proc.err.eachLine { line -> logger.error(line) }
  proc.waitFor()
  tag
}

// Use git tag as version name / code

def tagVersionName = gitTag()
logger.quiet("Version name: $tagVersionName")
def verVals = tagVersionName.split('-')[0].split('\\.')
int tagVersionCode = (
  verVals[0].toInteger()*10000 +
  verVals[1].toInteger()*100 +
  verVals[2].toInteger())
logger.quiet("Version code: $tagVersionCode")

// Library definition

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

// Uses fully qualified archives base name to prevent duplicates
// files generated by kotlin in META-INF.
archivesBaseName = "com.keecker.services.interfaces"

android {
  compileSdkVersion 27

  defaultConfig {
    minSdkVersion 19
    targetSdkVersion 27
    versionCode tagVersionCode
    versionName tagVersionName
    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    ndk.abiFilters 'arm64-v8a'
  }

  externalNativeBuild.cmake.path "CMakeLists.txt"

  buildTypes.release {
    minifyEnabled false
    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
  }

  testOptions.unitTests.all {
    testLogging.events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    jacoco.includeNoLocationClasses true
  }

  aidlPackageWhiteList "com/keecker/services/interfaces/IApiService.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/embedded/stm/MovementSafetiesStatus.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/DetectionResult.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IChargingStationListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IMovementPerceptionService.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IMovementPlannerService.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IMovementSafetiesListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IOdometryListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IPerceptionService.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/ITrackedPoseListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/ITrackingController.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/navigation/IWallSegmentationListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/projection/IProjectorService.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/utils/IIpcSubscriber.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/utils/ILowBatteryNotificationListener.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/utils/IpcMessage.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/utils/sharedmemory/ISharedBufferCallbacks.aidl"
  aidlPackageWhiteList "com/keecker/services/interfaces/utils/sharedmemory/ISharedMemorySubscriber.aidl"
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1"

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.23.0'
  testImplementation 'javax.inject:javax.inject:1'

  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  // TODO(cyril) update when updating Android Gradle Plugin
  androidTestImplementation 'org.mockito:mockito-android:2.22.0'
  androidTestImplementation 'javax.inject:javax.inject:1'
}

// Test Coverage definition

apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport) {
  dependsOn 'testDebugUnitTest'

  reports {
    xml.enabled = true
    html.enabled = true
  }

  def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    '**/data/models/*',
    '**/*$ViewBinder*.*',
    '**/*$InjectAdapter*.*',
    '**/*Injector*.*',
    'android/**/*.*',
    '**/*_MembersInjector.class',
    '**/Dagger*Component.class', // covers component implementations
    '**/Dagger*Component$Builder.class', // covers component builders
    '**/*Module_*Factory.class',
    '**/*_Factory*',
    '**/ui/*',
    '**/camera/view/*',
    '**/wearable/*',
    '**/settings/categorie/*',
    '**/*_ViewBinding*',
    '**/analytics/room/charts/*',
    '**/theme/*',
    '**/input/tv/*',
    '**/utils/*',
    '**/databinding/**',
    '**/*ViewHolder*',
    '**/*Adapter.*',
    '**/*Activity*',
    '**/*Fragment*',
    '**/*Module.*',
    '**/*ViewModelFactory.*',
    '**/settings/adapter/**'
  ]

  def debugTree = fileTree(
    dir: "${buildDir}/intermediates/classes/debug",
    excludes: fileFilter
  ) + fileTree(
    dir: "${buildDir}/tmp/kotlin-classes/debug",
    excludes: fileFilter
  )

  def mainSrc = "${projectDir}/src/main/java"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree])

  executionData = fileTree(dir: "$buildDir", includes: [
    "jacoco/testDebugUnitTest.exec",
    "outputs/code-coverage/connected/*coverage.ec"
  ])
}

// Artifact definition

apply plugin: 'digital.wup.android-maven-publish'

publishing {
  if (System.env['JITPACK'] == "true") {
    publications {
      mavenAar(MavenPublication) {
        from components.androidRelease
        groupId "com.github.keecker"
      }
    }
  } else {
    publications {
      android.libraryVariants.all { variant ->
        "maven${variant.name.capitalize()}Aar"(MavenPublication) {
            from components.findByName("android${variant.name.capitalize()}")
            groupId "com.keecker.services"
            artifactId "interfaces"
            version "${tagVersionName}-${variant.name}"
        }
      }
    }
    repositories {
      maven {
        url 'http://maven.keecker.com/artifactory/internal-snapshot-local'
        name 'keecker'
        credentials {
          username project.getProperty('artifactory_user')
          password project.getProperty('artifactory_password')
        }
      }
    }
  }
}

dokka {
  outputFormat = 'jekyll'
  outputDirectory = "$buildDir/javadoc"
  moduleName = 'services-api'

  skipDeprecated = true

  // Suppress legacy packages, still not in the official API
  packageOptions {
    prefix = "com.keecker.services.interfaces.utils"
    suppress = true
  }
  packageOptions {
    prefix = "com.keecker.services.interfaces.common"
    suppress = true
  }
  packageOptions {
    prefix = "com.keecker.services.interfaces.embedded.camera"
    suppress = true
  }
}
